plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'com.google.devtools.ksp' version '1.7.10-1.0.6' // for kotlin 1.7.10, compose-destination 1.6.13-beta
    id 'dagger.hilt.android.plugin'
    id 'com.google.dagger.hilt.android'
    id "org.jlleitschuh.gradle.ktlint" version "11.0.0"
    id 'kotlinx-serialization'
    id 'com.google.relay' version '0.3.02'
}

// For Compose Nav Destinations
kotlin {
    sourceSets {
        debug {
            kotlin.srcDir("build/generated/ksp/debug/kotlin")
        }
        release {
            kotlin.srcDir("build/generated/ksp/release/kotlin")
        }
    }
}

android {
    namespace 'com.example.kubot'
    compileSdk 33

    defaultConfig {
        applicationId "com.example.kubot"
        minSdk 28
        targetSdk 33
        versionCode 2
        versionName "1.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        // get path to project root folder
        def projectRoot = rootProject.projectDir.toString()

        // load api key from `api.properties` file
        def apiFile = new File(projectRoot, "api.properties")
        if (apiFile.exists()) {
            def apiProperties = new Properties()
            apiProperties.load(new FileInputStream(apiFile))
            buildConfigField "String", "API_KEY", "\"${apiProperties['API_KEY']}\""
        } else {
            println("ERROR - `api.properties` file not found - please add `api.properties` file with API_KEY to the root of the project")
        }

    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true               // for DateFormatter.ofPattern()
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        // kotlinCompilerExtensionVersion '1.2.0-rc02' // for Compose Destinations 1.5.23-beta
        kotlinCompilerExtensionVersion compose_compiler_version // for Compose Destinations 1.6.13-beta
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    // Get rid of `-opt-in=kotlin.RequiresOptIn` warning
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"  // for kotlinx.serialization ExperimentalSerializationApi
        }
    }

    tasks.withType(org.jlleitschuh.gradle.ktlint.tasks.GenerateReportsTask) {
        reportsOutputDirectory = project.layout.buildDirectory.dir("other/location/$name")
    }
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.0'

    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.activity:activity-compose:1.6.1'

    // Compose
    implementation "androidx.compose.ui:ui:$compose_ui_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_ui_version"
    implementation 'androidx.compose.material:material:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout-compose:1.0.1'

    // Icons
    implementation "androidx.compose.material:material-icons-extended:$compose_ui_version"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"  // for viewModelScope
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"  // for SavedStateHandle

    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'
    implementation 'androidx.appcompat:appcompat:1.5.1'

    // Compose Nav Destinations
    // For animations replace -core with:
    implementation "androidx.navigation:navigation-compose:2.5.3"

    // Swipe to Refresh
    implementation "com.google.accompanist:accompanist-swiperefresh:0.25.1"

    //Dagger - Hilt
    implementation "com.google.dagger:hilt-android:$dagger_hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$dagger_hilt_version"
    kapt "com.google.dagger:hilt-compiler:$dagger_hilt_version"
    implementation "androidx.hilt:hilt-common:1.0.0"
    kapt "androidx.hilt:hilt-compiler:1.0.0"
    implementation 'androidx.hilt:hilt-navigation-compose:1.0.0'

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

    // WorkManager
    implementation "androidx.work:work-runtime-ktx:$work_manager_version"
    implementation 'androidx.hilt:hilt-work:1.0.0'

    // KotlinX Serialization
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$kotlinx_serialization_json_version"
    implementation "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:0.8.0"

    // GSON Serialization (only for testing)
    implementation 'com.google.code.gson:gson:2.10'

    // Room
    implementation "androidx.room:room-ktx:$room_version"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:2.4.3"

    // Proto DataStore
    implementation "androidx.datastore:datastore-preferences:1.0.0"
    implementation "org.jetbrains.kotlinx:kotlinx-collections-immutable:0.3.5"

    // SplashScreen
    implementation "androidx.core:core-splashscreen:1.0.0"

    // Date & time picker dialogs
    implementation "io.github.vanpra.compose-material-dialogs:datetime:$compose_material_dialogs_datetime_version"
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.6'  // for LocalDateTime core library for java

    // Image loading
    implementation "io.coil-kt:coil-compose:2.2.1"

    // Logging with Logcat
    implementation 'com.squareup.logcat:logcat:0.1'

    // For testing
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_ui_version"
    androidTestImplementation project(path: ':app')
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_ui_version"
    testImplementation "com.google.truth:truth:1.1.3"
    testImplementation "io.mockk:mockk:1.13.2"
    testImplementation 'app.cash.turbine:turbine:0.11.0'
    testImplementation "androidx.arch.core:core-testing:2.1.0" // for InstantTaskExecutorRule (livedata)
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4" // runBlockingTest, CoroutineDispatcher
}

//                dependency = projects.samples.kotlinReporterCreating
ktlint {
    debug = true
    verbose = true
    outputToConsole = true
    android = true
    reporters {
//        reporter "checkstyle"
//        reporter "plain"
        reporter "html"
    }
    filter {
        exclude("**/build/**")
        include("**/kotlin/**")
    }
}
